{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Button from \"react-bootstrap/Button\";\n// import Form from \"react-bootstrap/Form\";\n// import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\n// import TableCell from \"@mui/material/TableCell\";\n// import TableContainer from \"@mui/material/TableContainer\";\n// import TableHead from \"@mui/material/TableHead\";\n// import TableRow from \"@mui/material/TableRow\";\n// import Swal from \"sweetalert2\";\n// import { BrowserRouter } from \"react-router-dom\";\n\n// export default function AdminPanel() {\n//   const [trains, setTrains] = useState([]);\n//   const [newTrain, setNewTrain] = useState({\n//     arrivalLocation: \"\",\n//     depatureLocation: \"\",\n//     price: \" \",\n//     date: \"\",\n//   });\n\n//   const API = \"https://localhost:44327/api/Values\";\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   function getData() {\n//     fetch(API)\n//       .then((response) => response.json())\n//       .then((info) => {\n//         setTrains(info);\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }\n\n//   function remove(id) {\n//     fetch(`${API}/${id}`, {\n//       method: \"DELETE\",\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to delete item\");\n//         }\n//         const updatedTrains = trains.filter((train) => train.id !== id);\n//         setTrains(updatedTrains);\n//       })\n//       .catch((error) => console.error(\"Error deleting item:\", error));\n//   }\n\n//   function handleInputChange(event) {\n//     const { name, value } = event.target;\n//     setNewTrain((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   }\n\n//   function addTrain() {\n//     fetch(API, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(newTrain),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to add new train\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTrains((prevTrains) => [...prevTrains, data]);\n//         setNewTrain({\n//           arrivalLocation: \"\",\n//           depatureLocation: \"\",\n//           price: \" \",\n//           date: \"\",\n//         });\n//         Swal.fire(\"Success\", \"New train added successfully!\", \"success\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error adding new train:\", error);\n//         Swal.fire(\"Error\", \"Failed to add new train\", \"error\");\n//       });\n//   }\n\n//   async function update(id) {\n//     const trainToUpdate = trains.find((train) => train.id === id);\n//     const { value: formValues } = await Swal.fire({\n//       title: \"Update Train Information\",\n//       html: `\n//                 <input id=\"swal-input1\" class=\"swal2-input\" placeholder=\"New Arrival Location\" value=\"${trainToUpdate.arrivalLocation}\">\n//                 <input id=\"swal-input2\" class=\"swal2-input\" placeholder=\"New Departure Location\" value=\"${trainToUpdate.depatureLocation}\">\n//                 <input id=\"swal-input3\" class=\"swal2-input\" placeholder=\"New Price\" value=\"${trainToUpdate.price}\">\n//                 <input id=\"swal-input4\" class=\"swal2-input\" type=\"date\" placeholder=\"New Date\" value=\"${trainToUpdate.date}\">\n//             `,\n//       focusConfirm: false,\n//       preConfirm: () => {\n//         return [\n//           document.getElementById(\"swal-input1\").value,\n//           document.getElementById(\"swal-input2\").value,\n//           document.getElementById(\"swal-input3\").value,\n//           document.getElementById(\"swal-input4\").value,\n//         ];\n//       },\n//     });\n\n//     if (formValues) {\n//       const updatedTrain = {\n//         ...trainToUpdate,\n//         arrivalLocation: formValues[0],\n//         depatureLocation: formValues[1],\n//         price: formValues[2],\n//         date: formValues[3],\n//       };\n\n//       fetch(`${API}/${id}`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(updatedTrain),\n//       })\n//         .then((response) => {\n//           if (!response.ok) {\n//             throw new Error(\"Failed to update train information\");\n//           }\n//           // Update state to reflect changes\n//           const updatedTrains = trains.map((train) =>\n//             train.id === id ? updatedTrain : train\n//           );\n//           setTrains(updatedTrains);\n//           // Optionally, display a success message\n//           Swal.fire(\n//             \"Success\",\n//             \"Train information updated successfully!\",\n//             \"success\"\n//           );\n//         })\n//         .catch((error) => {\n//           console.error(\"Error updating train information:\", error);\n//           Swal.fire(\"Error\", \"Failed to update train information\", \"error\");\n//         });\n//     }\n//   }\n\n//   return (\n//     <div\n//       style={{\n//         height: \"100vh\",\n//         padding: \"2rem 0\",\n//         backgroundColor: \"lightslategray\",\n//       }}\n//       className=\"container_horizontal\"\n//     >\n//       <Form\n//         style={{\n//           width: \"800px\",\n//           margin: \"auto\",\n//           padding: \"1rem\",\n//           border: \"1px solid black\",\n//           display: \"flex\",\n//           alignItems: \"center\",\n//           justifyContent: \"center\",\n//           gap: \"1rem\",\n//         }}\n//       >\n//         <Form.Group className=\"mb-3 \" controlId=\"arrivalLocation\">\n//           <Form.Label>Arrival Location</Form.Label>\n//           <Form.Control\n//             type=\"text\"\n//             name=\"arrivalLocation\"\n//             value={newTrain.arrivalLocation}\n//             onChange={handleInputChange}\n//           />\n//         </Form.Group>\n//         <Form.Group className=\"mb-3\" controlId=\"depatureLocation\">\n//           <Form.Label>Departure Location</Form.Label>\n//           <Form.Control\n//             type=\"text\"\n//             name=\"depatureLocation\"\n//             value={newTrain.depatureLocation}\n//             onChange={handleInputChange}\n//           />\n//         </Form.Group>\n//         <Form.Group className=\"mb-3\" controlId=\"price\">\n//           <Form.Label>Price</Form.Label>\n//           <Form.Control\n//             type=\"text\"\n//             name=\"price\"\n//             value={newTrain.price}\n//             onChange={handleInputChange}\n//           />\n//         </Form.Group>\n//         <Form.Group className=\"mb-3\" controlId=\"date\">\n//           <Form.Label>Date</Form.Label>\n//           <Form.Control\n//             type=\"date\"\n//             name=\"date\"\n//             value={newTrain.date}\n//             onChange={handleInputChange}\n//           />\n//         </Form.Group>\n\n//         <Button variant=\"info\" type=\"button\" onClick={addTrain}>\n//           Add\n//         </Button>\n//       </Form>\n//       <TableContainer>\n//         <Table\n//           sx={{\n//             maxWidth: \"1000px\",\n//             margin: \"1rem auto\",\n//             border: \"1px solid black\",\n//           }}\n//           aria-label=\"simple table\"\n//         >\n//           <TableHead>\n//             <TableRow>\n//               <TableCell\n//                 style={{\n//                   color: \"black\",\n//                   fontWeight: \"600\",\n//                   backgroundColor: \"lightblue\",\n//                 }}\n//               >\n//                 Edit or Delete\n//               </TableCell>\n//               <TableCell\n//                 style={{\n//                   color: \"black\",\n//                   fontWeight: \"600\",\n//                   backgroundColor: \"lightblue\",\n//                 }}\n//               >\n//                 Arrival Location\n//               </TableCell>\n//               <TableCell\n//                 style={{\n//                   color: \"black\",\n//                   fontWeight: \"600\",\n//                   backgroundColor: \"lightblue\",\n//                 }}\n//               >\n//                 Departure Location\n//               </TableCell>\n//               <TableCell\n//                 style={{\n//                   color: \"black\",\n//                   fontWeight: \"600\",\n//                   backgroundColor: \"lightblue\",\n//                 }}\n//               >\n//                 Price\n//               </TableCell>\n//               <TableCell\n//                 style={{\n//                   color: \"black\",\n//                   fontWeight: \"600\",\n//                   backgroundColor: \"lightblue\",\n//                 }}\n//               >\n//                 Date\n//               </TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {trains.map((train) => (\n//               <TableRow key={train.id}>\n//                 <TableCell>\n//                   <Button\n//                     style={{ margin: \"0 0.3rem\" }}\n//                     onClick={() => update(train.id)}\n//                     variant=\"info\"\n//                   >\n//                     Update\n//                   </Button>\n//                   <Button onClick={() => remove(train.id)} variant=\"info\">\n//                     Remove\n//                   </Button>\n//                 </TableCell>\n//                 <TableCell>{train.arrivalLocation}</TableCell>\n//                 <TableCell>{train.depatureLocation}</TableCell>\n//                 <TableCell>{train.price}</TableCell>\n//                 <TableCell>{train.date}</TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/PC/Desktop/dilshi/dilshi/web_app3/railway_app/src/administrator/AdminPanel.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Button from \"react-bootstrap/Button\";\r\n// import Form from \"react-bootstrap/Form\";\r\n// import Table from \"@mui/material/Table\";\r\n// import TableBody from \"@mui/material/TableBody\";\r\n// import TableCell from \"@mui/material/TableCell\";\r\n// import TableContainer from \"@mui/material/TableContainer\";\r\n// import TableHead from \"@mui/material/TableHead\";\r\n// import TableRow from \"@mui/material/TableRow\";\r\n// import Swal from \"sweetalert2\";\r\n// import { BrowserRouter } from \"react-router-dom\";\r\n\r\n// export default function AdminPanel() {\r\n//   const [trains, setTrains] = useState([]);\r\n//   const [newTrain, setNewTrain] = useState({\r\n//     arrivalLocation: \"\",\r\n//     depatureLocation: \"\",\r\n//     price: \" \",\r\n//     date: \"\",\r\n//   });\r\n\r\n//   const API = \"https://localhost:44327/api/Values\";\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   function getData() {\r\n//     fetch(API)\r\n//       .then((response) => response.json())\r\n//       .then((info) => {\r\n//         setTrains(info);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }\r\n\r\n//   function remove(id) {\r\n//     fetch(`${API}/${id}`, {\r\n//       method: \"DELETE\",\r\n//     })\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to delete item\");\r\n//         }\r\n//         const updatedTrains = trains.filter((train) => train.id !== id);\r\n//         setTrains(updatedTrains);\r\n//       })\r\n//       .catch((error) => console.error(\"Error deleting item:\", error));\r\n//   }\r\n\r\n//   function handleInputChange(event) {\r\n//     const { name, value } = event.target;\r\n//     setNewTrain((prevState) => ({\r\n//       ...prevState,\r\n//       [name]: value,\r\n//     }));\r\n//   }\r\n\r\n//   function addTrain() {\r\n//     fetch(API, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(newTrain),\r\n//     })\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to add new train\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         setTrains((prevTrains) => [...prevTrains, data]);\r\n//         setNewTrain({\r\n//           arrivalLocation: \"\",\r\n//           depatureLocation: \"\",\r\n//           price: \" \",\r\n//           date: \"\",\r\n//         });\r\n//         Swal.fire(\"Success\", \"New train added successfully!\", \"success\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error adding new train:\", error);\r\n//         Swal.fire(\"Error\", \"Failed to add new train\", \"error\");\r\n//       });\r\n//   }\r\n\r\n//   async function update(id) {\r\n//     const trainToUpdate = trains.find((train) => train.id === id);\r\n//     const { value: formValues } = await Swal.fire({\r\n//       title: \"Update Train Information\",\r\n//       html: `\r\n//                 <input id=\"swal-input1\" class=\"swal2-input\" placeholder=\"New Arrival Location\" value=\"${trainToUpdate.arrivalLocation}\">\r\n//                 <input id=\"swal-input2\" class=\"swal2-input\" placeholder=\"New Departure Location\" value=\"${trainToUpdate.depatureLocation}\">\r\n//                 <input id=\"swal-input3\" class=\"swal2-input\" placeholder=\"New Price\" value=\"${trainToUpdate.price}\">\r\n//                 <input id=\"swal-input4\" class=\"swal2-input\" type=\"date\" placeholder=\"New Date\" value=\"${trainToUpdate.date}\">\r\n//             `,\r\n//       focusConfirm: false,\r\n//       preConfirm: () => {\r\n//         return [\r\n//           document.getElementById(\"swal-input1\").value,\r\n//           document.getElementById(\"swal-input2\").value,\r\n//           document.getElementById(\"swal-input3\").value,\r\n//           document.getElementById(\"swal-input4\").value,\r\n//         ];\r\n//       },\r\n//     });\r\n\r\n//     if (formValues) {\r\n//       const updatedTrain = {\r\n//         ...trainToUpdate,\r\n//         arrivalLocation: formValues[0],\r\n//         depatureLocation: formValues[1],\r\n//         price: formValues[2],\r\n//         date: formValues[3],\r\n//       };\r\n\r\n//       fetch(`${API}/${id}`, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(updatedTrain),\r\n//       })\r\n//         .then((response) => {\r\n//           if (!response.ok) {\r\n//             throw new Error(\"Failed to update train information\");\r\n//           }\r\n//           // Update state to reflect changes\r\n//           const updatedTrains = trains.map((train) =>\r\n//             train.id === id ? updatedTrain : train\r\n//           );\r\n//           setTrains(updatedTrains);\r\n//           // Optionally, display a success message\r\n//           Swal.fire(\r\n//             \"Success\",\r\n//             \"Train information updated successfully!\",\r\n//             \"success\"\r\n//           );\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error updating train information:\", error);\r\n//           Swal.fire(\"Error\", \"Failed to update train information\", \"error\");\r\n//         });\r\n//     }\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         height: \"100vh\",\r\n//         padding: \"2rem 0\",\r\n//         backgroundColor: \"lightslategray\",\r\n//       }}\r\n//       className=\"container_horizontal\"\r\n//     >\r\n//       <Form\r\n//         style={{\r\n//           width: \"800px\",\r\n//           margin: \"auto\",\r\n//           padding: \"1rem\",\r\n//           border: \"1px solid black\",\r\n//           display: \"flex\",\r\n//           alignItems: \"center\",\r\n//           justifyContent: \"center\",\r\n//           gap: \"1rem\",\r\n//         }}\r\n//       >\r\n//         <Form.Group className=\"mb-3 \" controlId=\"arrivalLocation\">\r\n//           <Form.Label>Arrival Location</Form.Label>\r\n//           <Form.Control\r\n//             type=\"text\"\r\n//             name=\"arrivalLocation\"\r\n//             value={newTrain.arrivalLocation}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </Form.Group>\r\n//         <Form.Group className=\"mb-3\" controlId=\"depatureLocation\">\r\n//           <Form.Label>Departure Location</Form.Label>\r\n//           <Form.Control\r\n//             type=\"text\"\r\n//             name=\"depatureLocation\"\r\n//             value={newTrain.depatureLocation}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </Form.Group>\r\n//         <Form.Group className=\"mb-3\" controlId=\"price\">\r\n//           <Form.Label>Price</Form.Label>\r\n//           <Form.Control\r\n//             type=\"text\"\r\n//             name=\"price\"\r\n//             value={newTrain.price}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </Form.Group>\r\n//         <Form.Group className=\"mb-3\" controlId=\"date\">\r\n//           <Form.Label>Date</Form.Label>\r\n//           <Form.Control\r\n//             type=\"date\"\r\n//             name=\"date\"\r\n//             value={newTrain.date}\r\n//             onChange={handleInputChange}\r\n//           />\r\n//         </Form.Group>\r\n\r\n//         <Button variant=\"info\" type=\"button\" onClick={addTrain}>\r\n//           Add\r\n//         </Button>\r\n//       </Form>\r\n//       <TableContainer>\r\n//         <Table\r\n//           sx={{\r\n//             maxWidth: \"1000px\",\r\n//             margin: \"1rem auto\",\r\n//             border: \"1px solid black\",\r\n//           }}\r\n//           aria-label=\"simple table\"\r\n//         >\r\n//           <TableHead>\r\n//             <TableRow>\r\n//               <TableCell\r\n//                 style={{\r\n//                   color: \"black\",\r\n//                   fontWeight: \"600\",\r\n//                   backgroundColor: \"lightblue\",\r\n//                 }}\r\n//               >\r\n//                 Edit or Delete\r\n//               </TableCell>\r\n//               <TableCell\r\n//                 style={{\r\n//                   color: \"black\",\r\n//                   fontWeight: \"600\",\r\n//                   backgroundColor: \"lightblue\",\r\n//                 }}\r\n//               >\r\n//                 Arrival Location\r\n//               </TableCell>\r\n//               <TableCell\r\n//                 style={{\r\n//                   color: \"black\",\r\n//                   fontWeight: \"600\",\r\n//                   backgroundColor: \"lightblue\",\r\n//                 }}\r\n//               >\r\n//                 Departure Location\r\n//               </TableCell>\r\n//               <TableCell\r\n//                 style={{\r\n//                   color: \"black\",\r\n//                   fontWeight: \"600\",\r\n//                   backgroundColor: \"lightblue\",\r\n//                 }}\r\n//               >\r\n//                 Price\r\n//               </TableCell>\r\n//               <TableCell\r\n//                 style={{\r\n//                   color: \"black\",\r\n//                   fontWeight: \"600\",\r\n//                   backgroundColor: \"lightblue\",\r\n//                 }}\r\n//               >\r\n//                 Date\r\n//               </TableCell>\r\n//             </TableRow>\r\n//           </TableHead>\r\n//           <TableBody>\r\n//             {trains.map((train) => (\r\n//               <TableRow key={train.id}>\r\n//                 <TableCell>\r\n//                   <Button\r\n//                     style={{ margin: \"0 0.3rem\" }}\r\n//                     onClick={() => update(train.id)}\r\n//                     variant=\"info\"\r\n//                   >\r\n//                     Update\r\n//                   </Button>\r\n//                   <Button onClick={() => remove(train.id)} variant=\"info\">\r\n//                     Remove\r\n//                   </Button>\r\n//                 </TableCell>\r\n//                 <TableCell>{train.arrivalLocation}</TableCell>\r\n//                 <TableCell>{train.depatureLocation}</TableCell>\r\n//                 <TableCell>{train.price}</TableCell>\r\n//                 <TableCell>{train.date}</TableCell>\r\n//               </TableRow>\r\n//             ))}\r\n//           </TableBody>\r\n//         </Table>\r\n//       </TableContainer>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}