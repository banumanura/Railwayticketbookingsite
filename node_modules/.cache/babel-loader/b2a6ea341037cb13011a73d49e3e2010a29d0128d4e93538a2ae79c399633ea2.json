{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import Button from \"react-bootstrap/Button\";\n// import Form from \"react-bootstrap/Form\";\n// import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\n// import TableCell from \"@mui/material/TableCell\";\n// import TableContainer from \"@mui/material/TableContainer\";\n// import TableHead from \"@mui/material/TableHead\";\n// import TableRow from \"@mui/material/TableRow\";\n// import Swal from \"sweetalert2\";\n// import { BrowserRouter } from \"react-router-dom\";\n\n// export default function AdminPanel() {\n//   const [trains, setTrains] = useState([]);\n//   const [newTrain, setNewTrain] = useState({\n//     arrivalLocation: \"\",\n//     depatureLocation: \"\",\n//     price: \" \",\n//     date: \"\",\n//   });\n\n//   const API = \"https://localhost:44327/api/Values\";\n\n//   useEffect(() => {\n//     getData();\n//   }, []);\n\n//   function getData() {\n//     fetch(API)\n//       .then((response) => response.json())\n//       .then((info) => {\n//         setTrains(info);\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }\n\n//   function remove(id) {\n//     fetch(`${API}/${id}`, {\n//       method: \"DELETE\",\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to delete item\");\n//         }\n//         const updatedTrains = trains.filter((train) => train.id !== id);\n//         setTrains(updatedTrains);\n//       })\n//       .catch((error) => console.error(\"Error deleting item:\", error));\n//   }\n\n//   function handleInputChange(event) {\n//     const { name, value } = event.target;\n//     setNewTrain((prevState) => ({\n//       ...prevState,\n//       [name]: value,\n//     }));\n//   }\n\n//   function addTrain() {\n//     fetch(API, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(newTrain),\n//     })\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to add new train\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setTrains((prevTrains) => [...prevTrains, data]);\n//         setNewTrain({\n//           arrivalLocation: \"\",\n//           depatureLocation: \"\",\n//           price: \" \",\n//           date: \"\",\n//         });\n//         Swal.fire(\"Success\", \"New train added successfully!\", \"success\");\n//       })\n//       .catch((error) => {\n//         console.error(\"Error adding new train:\", error);\n//         Swal.fire(\"Error\", \"Failed to add new train\", \"error\");\n//       });\n//   }\n\n//   async function update(id) {\n//     const trainToUpdate = trains.find((train) => train.id === id);\n//     const { value: formValues } = await Swal.fire({\n//       title: \"Update Train Information\",\n//       html: `\n//                 <input id=\"swal-input1\" class=\"swal2-input\" placeholder=\"New Arrival Location\" value=\"${trainToUpdate.arrivalLocation}\">\n//                 <input id=\"swal-input2\" class=\"swal2-input\" placeholder=\"New Departure Location\" value=\"${trainToUpdate.depatureLocation}\">\n//                 <input id=\"swal-input3\" class=\"swal2-input\" placeholder=\"New Price\" value=\"${trainToUpdate.price}\">\n//                 <input id=\"swal-input4\" class=\"swal2-input\" type=\"date\" placeholder=\"New Date\" value=\"${trainToUpdate.date}\">\n//             `,\n//       focusConfirm: false,\n//       preConfirm: () => {\n//         return [\n//           document.getElementById(\"swal-input1\").value,\n//           document.getElementById(\"swal-input2\").value,\n//           document.getElementById(\"swal-input3\").value,\n//           document.getElementById(\"swal-input4\").value,\n//         ];\n//       },\n//     });\n\n//     if (formValues) {\n//       const updatedTrain = {\n//         ...trainToUpdate,\n//         arrivalLocation: formValues[0],\n//         depatureLocation: formValues[1],\n//         price: formValues[2],\n//         date: formValues[3],\n//       };\n\n//       fetch(`${API}/${id}`, {\n//         method: \"PUT\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(updatedTrain),\n//       })\n//         .then((response) => {\n//           if (!response.ok) {\n//             throw new Error(\"Failed to update train information\");\n//           }\n//           // Update state to reflect changes\n//           const updatedTrains = trains.map((train) =>\n//             train.id === id ? updatedTrain : train\n//           );\n//           setTrains(updatedTrains);\n//           // Optionally, display a success message\n//           Swal.fire(\n//             \"Success\",\n//             \"Train information updated successfully!\",\n//             \"success\"\n//           );\n//         })\n//         .catch((error) => {\n//           console.error(\"Error updating train information:\", error);\n//           Swal.fire(\"Error\", \"Failed to update train information\", \"error\");\n//         });\n//     }\n//   }","map":{"version":3,"names":[],"sources":["C:/Users/PC/Desktop/dilshi/dilshi/web_app3/railway_app/src/administrator/AdminPanel.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import Button from \"react-bootstrap/Button\";\r\n// import Form from \"react-bootstrap/Form\";\r\n// import Table from \"@mui/material/Table\";\r\n// import TableBody from \"@mui/material/TableBody\";\r\n// import TableCell from \"@mui/material/TableCell\";\r\n// import TableContainer from \"@mui/material/TableContainer\";\r\n// import TableHead from \"@mui/material/TableHead\";\r\n// import TableRow from \"@mui/material/TableRow\";\r\n// import Swal from \"sweetalert2\";\r\n// import { BrowserRouter } from \"react-router-dom\";\r\n\r\n// export default function AdminPanel() {\r\n//   const [trains, setTrains] = useState([]);\r\n//   const [newTrain, setNewTrain] = useState({\r\n//     arrivalLocation: \"\",\r\n//     depatureLocation: \"\",\r\n//     price: \" \",\r\n//     date: \"\",\r\n//   });\r\n\r\n//   const API = \"https://localhost:44327/api/Values\";\r\n\r\n//   useEffect(() => {\r\n//     getData();\r\n//   }, []);\r\n\r\n//   function getData() {\r\n//     fetch(API)\r\n//       .then((response) => response.json())\r\n//       .then((info) => {\r\n//         setTrains(info);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }\r\n\r\n//   function remove(id) {\r\n//     fetch(`${API}/${id}`, {\r\n//       method: \"DELETE\",\r\n//     })\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to delete item\");\r\n//         }\r\n//         const updatedTrains = trains.filter((train) => train.id !== id);\r\n//         setTrains(updatedTrains);\r\n//       })\r\n//       .catch((error) => console.error(\"Error deleting item:\", error));\r\n//   }\r\n\r\n//   function handleInputChange(event) {\r\n//     const { name, value } = event.target;\r\n//     setNewTrain((prevState) => ({\r\n//       ...prevState,\r\n//       [name]: value,\r\n//     }));\r\n//   }\r\n\r\n//   function addTrain() {\r\n//     fetch(API, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//       },\r\n//       body: JSON.stringify(newTrain),\r\n//     })\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to add new train\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         setTrains((prevTrains) => [...prevTrains, data]);\r\n//         setNewTrain({\r\n//           arrivalLocation: \"\",\r\n//           depatureLocation: \"\",\r\n//           price: \" \",\r\n//           date: \"\",\r\n//         });\r\n//         Swal.fire(\"Success\", \"New train added successfully!\", \"success\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(\"Error adding new train:\", error);\r\n//         Swal.fire(\"Error\", \"Failed to add new train\", \"error\");\r\n//       });\r\n//   }\r\n\r\n//   async function update(id) {\r\n//     const trainToUpdate = trains.find((train) => train.id === id);\r\n//     const { value: formValues } = await Swal.fire({\r\n//       title: \"Update Train Information\",\r\n//       html: `\r\n//                 <input id=\"swal-input1\" class=\"swal2-input\" placeholder=\"New Arrival Location\" value=\"${trainToUpdate.arrivalLocation}\">\r\n//                 <input id=\"swal-input2\" class=\"swal2-input\" placeholder=\"New Departure Location\" value=\"${trainToUpdate.depatureLocation}\">\r\n//                 <input id=\"swal-input3\" class=\"swal2-input\" placeholder=\"New Price\" value=\"${trainToUpdate.price}\">\r\n//                 <input id=\"swal-input4\" class=\"swal2-input\" type=\"date\" placeholder=\"New Date\" value=\"${trainToUpdate.date}\">\r\n//             `,\r\n//       focusConfirm: false,\r\n//       preConfirm: () => {\r\n//         return [\r\n//           document.getElementById(\"swal-input1\").value,\r\n//           document.getElementById(\"swal-input2\").value,\r\n//           document.getElementById(\"swal-input3\").value,\r\n//           document.getElementById(\"swal-input4\").value,\r\n//         ];\r\n//       },\r\n//     });\r\n\r\n//     if (formValues) {\r\n//       const updatedTrain = {\r\n//         ...trainToUpdate,\r\n//         arrivalLocation: formValues[0],\r\n//         depatureLocation: formValues[1],\r\n//         price: formValues[2],\r\n//         date: formValues[3],\r\n//       };\r\n\r\n//       fetch(`${API}/${id}`, {\r\n//         method: \"PUT\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify(updatedTrain),\r\n//       })\r\n//         .then((response) => {\r\n//           if (!response.ok) {\r\n//             throw new Error(\"Failed to update train information\");\r\n//           }\r\n//           // Update state to reflect changes\r\n//           const updatedTrains = trains.map((train) =>\r\n//             train.id === id ? updatedTrain : train\r\n//           );\r\n//           setTrains(updatedTrains);\r\n//           // Optionally, display a success message\r\n//           Swal.fire(\r\n//             \"Success\",\r\n//             \"Train information updated successfully!\",\r\n//             \"success\"\r\n//           );\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error updating train information:\", error);\r\n//           Swal.fire(\"Error\", \"Failed to update train information\", \"error\");\r\n//         });\r\n//     }\r\n//   }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}